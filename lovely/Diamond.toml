[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[vars]
seals_eval_check = "if next(eval) and eval.seals and (next(effects[1]) or #effects > 1) then"
eval_sticker_rep = '''
if next(eval) and eval.stickers then
    for h  = 1, eval.stickers.repetitions do
        reps[#reps+1] = eval
    end
end
'''

# Diamond functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if context.repetition_only then"
position = "after"
payload = ''' 
for k, v in pairs(SMODS.Stickers) do
    if card.area == G.hand and card.ability.name ~= "Metal Card" then break end

	if card.ability[k] and v.calculate and type(v.calculate) == "function" then
		local stickers = v:calculate(card, context)
        if stickers then
            ret.stickers = stickers
        end
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''local eval = eval_card(G.hand.cards[i], {repetition_only = true,cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, repetition = true, card_effects = effects})'''
position = "after"
payload = '''{{lovely:eval_sticker_rep}}'''
match_indent = true

# have to repeat twice because of an indentation mistake
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if next(eval) and (next(effects[1]) or #effects > 1) then"
position = "at"
payload = "{{lovely:seals_eval_check}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if next(eval) and (next(effects[1]) or #effects > 1)  then"
position = "at"
payload = "{{lovely:seals_eval_check}}"
match_indent = true

# everything from here is just manual patches
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if next(eval) then 
                                for h  = 1, eval.jokers.repetitions do'''
position = "at"
payload = '''if next(eval) and eval.jokers then
                                for h  = 1, eval.jokers.repetitions do'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if next(eval) then 
                    for h = 1, eval.seals.repetitions do'''
position = "at"
payload = '''if next(eval) and eval.seals then 
                    for h = 1, eval.seals.repetitions do'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = eval_card(G.hand.cards[i], {end_of_round = true,cardarea = G.hand, repetition = true, repetition_only = true})"
position = "after"
payload = "{{lovely:eval_sticker_rep}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = eval_card(scoring_hand[i], {repetition_only = true,cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, repetition = true})"
position = "after"
payload = "{{lovely:eval_sticker_rep}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "card_eval_status_text((reps[j].jokers or reps[j].seals).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals))"
position = "at"
payload = "card_eval_status_text((reps[j].jokers or reps[j].seals or reps[j].stickers).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals or reps[j].stickers))"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if reps[j] ~= 1 then card_eval_status_text((reps[j].jokers or reps[j].seals).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals)) end"
position = "at"
payload = "if reps[j] ~= 1 then card_eval_status_text((reps[j].jokers or reps[j].seals or reps[j].stickers).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals or reps[j].stickers)) end"
match_indent = true